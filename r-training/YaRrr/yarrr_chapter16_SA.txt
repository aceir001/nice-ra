
R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[R.app GUI 1.77 (7985) x86_64-apple-darwin17.0]

[Workspace restored from /Users/salmaabusamrah/.RData]
[History restored from /Users/salmaabusamrah/.Rapp.history]

> library(yarrr)
Loading required package: jpeg
Loading required package: BayesFactor
Loading required package: coda
Loading required package: Matrix
************
Welcome to BayesFactor 0.9.12-4.2. If you have questions, please contact Richard Morey (richarddmorey@gmail.com).

Type BFManual() to open the manual.
************
Loading required package: circlize
========================================
circlize version 0.4.13
CRAN page: https://cran.r-project.org/package=circlize
Github page: https://github.com/jokergoo/circlize
Documentation: https://jokergoo.github.io/circlize_book/book/

If you use it in published research, please cite:
Gu, Z. circlize implements and enhances circular visualization
  in R. Bioinformatics 2014.

This message can be suppressed by:
  suppressPackageStartupMessages(library(circlize))
========================================

yarrr v0.1.5. Citation info at citation('yarrr'). Package guide at yarrr.guide()
Email me at Nathaniel.D.Phillips.is@gmail.com

Attaching package: ‘yarrr’

The following objects are masked _by_ ‘.GlobalEnv’:

    auction, diamonds, movies, poopdeck

> piratehist <- function(x, ...) {
+ 
+ hist(x,
+      col = gray(.5, .2),
+      border = "white",
+      yaxt = "n",
+      ylab = "",
+      ...)
+ 
+ 
+ ci <- t.test(x)$conf.int
+ top.text <- paste(
+   "Mean = ", round(mean(x), 2),
+   " (95% CI [", round(ci[1], 2),
+   ", ", round(ci[2], 2), 
+   "]), SD = ", round(sd(x), 2), 
+   sep = "")
+ 
+ mtext(top.text, side = 3)
+ }
> piratehist(pirates$age,
+         xlab = "Age",
+         main = "Pirates' Ages")
> NAME <- function(ARGUMENTS) {
+ 
+   ACTIONS
+ 
+   return(OUTPUT)
+ 
+ }
> my.mean <- function(x) {   # Single input called x
+ 
+   output <- sum(x) / length(x) # Calculate output
+ 
+ return(output)  # Return output to the user after running the function
+ 
+ }
> data <- c(3, 1, 6, 4, 2, 8, 4, 2)
> my.mean(data)
[1] 3.75
> mean(data)
[1] 3.75
> 
> oh.god.how.much.did.i.spend <- function(grogg,
+                                         port,
+                                         crabjuice) {
+ 
+   output <- grogg * 1 + port * 3 + crabjuice * 10
+ 
+   return(output)
+ }
> oh.god.how.much.did.i.spend(grogg = 10,
+                             port = 3,
+                             crabjuice = 0)
[1] 19
> oh.god.how.much.did.i.spend(grogg = 0,
+                             port = 0,
+                             crabjuice = 7)
[1] 70
> oh.god.how.much.did.i.spend <- function(grogg = 0,
+                                         port = 0,
+                                         crabjuice = 0) {
+ 
+   output <- grogg * 1 + port * 3 + crabjuice * 10
+ 
+   return(output)
+ }
> oh.god.how.much.did.i.spend(port = 5)
[1] 15
> is.it.true <- function(x) {
+   
+ if(x == TRUE) {print("x was true!")}
+ if(x == FALSE) {print("x was false!")}
+   
+ }
> is.it.true(TRUE)
[1] "x was true!"
> is.it.true(FALSE)
[1] "x was false!"
> is.it.true(10 > 0)
[1] "x was true!"
> is.it.true(10 < 0)
[1] "x was false!"
> show.me <- function(x, what) {
+ 
+ if(what == "plot") {
+   
+   hist(x, yaxt = "n", ylab = "", border = "white", 
+        col = "skyblue", xlab = "",
+        main = "Ok! I hope you like the plot...")
+   
+ }
+ 
+ if(what == "stats") {
+   
+   print(paste("Yarr! The mean of this data be ", 
+                   round(mean(x), 2),
+               " and the standard deviation be ", 
+               round(sd(x), 2),
+               sep = ""))
+   
+ }
+ 
+ if(what == "tellmeajoke") {
+   
+   print("I am a pirate, not your joke monkey.")
+   
+ }
+ }
> show.me(x = pirates$beard.length, 
+         what = "plot")
> show.me(x = pirates$beard.length, 
+         what = "stats")
[1] "Yarr! The mean of this data be 10.38 and the standard deviation be 10.31"
> show.me(what = "tellmeajoke")
[1] "I am a pirate, not your joke monkey."
> 
> plot.advanced <- function (x = rnorm(100),
+                            y = rnorm(100),
+                            add.mean = FALSE,
+                            add.regression = FALSE,
+                            p.threshold = .05,
+                            add.modeltext = FALSE,
+                            ...  # Optional further arguments passed on to plot
+                            ) {
+   plot(x, y, ...)
+ 
+ if(add.mean == TRUE) {
+ 
+   abline(h = mean(y), lty = 2)
+   abline(v = mean(x), lty = 2)
+ }
+ 
+ if(add.regression == TRUE) {
+ 
+   model <- lm(y ~ x)  # Run regression
+ 
+   p.value <- anova(model)$"Pr(>F)"[1] # Get p-value
+ 
+   # Define line color from model p-value and threshold
+   if(p.value < p.threshold) {line.col <- "red"}
+   if(p.value >= p.threshold) {line.col <- "black"}
+ 
+   abline(lm(y ~ x), col = line.col, lwd = 2) # Add regression line
+ 
+ }
+ if(add.modeltext == TRUE) {
+ 
+   model <- lm(y ~ x)
+ 
+ coefficients <- model$coefficients
+   a <- round(coefficients[1], 2)
+   b <- round(coefficients[2], 2)
+ 
+ model.text <- paste("Regression Equation: ", a, " + ",
+                       b, " * x", sep = "")
+ 
+ mtext(model.text, side = 3, line = .5, cex = .8)
+ 
+ }
+ }
> plot.advanced(x = pirates$age,
+               y = pirates$tchests,
+               add.regression = TRUE,
+               add.modeltext = TRUE,
+               p.threshold = .05,
+               main = "plot.advanced()",
+               xlab = "Age", ylab = "Treasure Chests Found",
+               pch = 16,
+               col = gray(.2, .3))
> transparent
function (orig.col = "red", trans.val = 1, maxColorValue = 255) 
{
    n.cols <- length(orig.col)
    orig.col <- col2rgb(orig.col)
    final.col <- rep(NA, n.cols)
    for (i in 1:n.cols) {
        final.col[i] <- rgb(orig.col[1, i], orig.col[2, i], orig.col[3, 
            i], alpha = (1 - trans.val) * 255, maxColorValue = maxColorValue)
    }
    return(final.col)
}
<bytecode: 0x7f829e007150>
<environment: namespace:yarrr>
> do.stats <- function(mat) {
+   
+ if(is.matrix(mat) == F) {stop("Argument was not a matrix!")}
+ 
+ # Only run if argument is a matrix!
+ print(paste("Thanks for giving me a matrix. The matrix has ", nrow(mat), 
+ " rows and ", ncol(mat), 
+ " columns. If you did not give me a matrix, the function would have stopped by now!", 
+ sep = ""))
+ 
+ }
> 
> do.stats(mat = "This is a string, not a matrix") 
Error in do.stats(mat = "This is a string, not a matrix") : 
  Argument was not a matrix!
> 
> do.stats(mat = matrix(1:10, nrow = 2, ncol = 5))
[1] "Thanks for giving me a matrix. The matrix has 2 rows and 5 columns. If you did not give me a matrix, the function would have stopped by now!"
> 
> oh.god.how.much.did.i.spend <- function(drinks.vec) {
+ 
+   grogg <- drinks.vec[1]
+   port <- drinks.vec[2]
+   crabjuice <- drinks.vec[3]
+ 
+   output <- grogg * 1 + port * 3 + crabjuice * 10
+ 
+   return(output)
+ 
+ }
> oh.god.how.much.did.i.spend(c(1, 5, 2))
[1] 36
> 
> remove.outliers <- function(x, outlier.def = 2) {
+ 
+ is.outlier <- x > (mean(x) + outlier.def * sd(x)) | 
+                 x < (mean(x) - outlier.def * sd(x))
+   
+   x.nooutliers <- x[is.outlier == FALSE]
+ 
+   return(x.nooutliers)
+ 
+ }
> hist.advanced <- function(x, add.ci = TRUE, ...) {
+ 
+ hist(x, # Main Data
+      ... # Here is where the additional arguments go
+      )
+ 
+ if(add.ci == TRUE) {
+ 
+   ci <- t.test(x)$conf.int # Get 95% CI
+   segments(ci[1], 0, ci[2], 0, lwd = 5, col = "red")
+ 
+   mtext(paste("95% CI of Mean = [", round(ci[1], 2), ",",
+               round(ci[2], 2), "]"), side = 3, line = 0)
+ }
+ }
> hist.advanced(x = rnorm(100), add.ci = TRUE,
+               main = "Treasure Chests found",
+               xlab = "Number of Chests",
+               col = "lightblue")
> {r, echo = FALSE}
Error: unexpected ',' in "{r,"
> Jacks.Equation <- function(a, b, c) {
+   
+   return(a * b - c * 324 + log(a))
+   
+ }
> {r, echo = FALSE}
Error: unexpected ',' in "{r,"
> {r echo = FALSE}
Error: unexpected symbol in "{r echo"
> Jacks.Equation <- function(a,b,c) {
+   output <- (a*b) - c * 324 + log(a)
+   return(output)
+ }
> standardize.me <- function(x){
+   output <- (x-mean(x))/sd(x)
+   return(output)
+ }
> survey <- data.frame(
+                      id = 1:6,
+                      q1 = c(6, 2, 5, -1, 11, 100),
+                      q2 = c(-5, 4, 65, 3, 7, 6),
+                      q3 = c(2, 1, 2, 45, 5, -5)
+                      )
> 
> survey
  id  q1 q2 q3
1  1   6 -5  2
2  2   2  4  1
3  3   5 65  2
4  4  -1  3 45
5  5  11  7  5
6  6 100  6 -5
> plot.advanced(x = diamonds$weight,
+               y = diamonds$value,
+               add.regression = TRUE,
+               add.means = TRUE,
+               add.test = TRUE)
There were 12 warnings (use warnings() to see them)
> plot.advanced <- function(x, y, add.regression = T, add.means = T, add.test = T, ...) {
+   
+   plot(x, y, ...)
+   
+   if(add.regression) {
+     
+     abline(lm(y ~ x), lwd = 2)
+     
+   }
+   
+   if(add.means) {
+     
+     abline(v = mean(x), lty = 2)
+     abline(h = mean(y), lty = 2)
+     
+   }
+   
+   if(add.test) {
+     
+     test <- cor.test(x, y)
+     
+     text.to.add <- paste("r = ", round(test$estimate, 2), ", t(", round(test$parameter, 2), ") = ", round(test$statistic, 2), ", p = ", round(test$p.value, 2), sep = "")
+     
+     mtext(text = text.to.add, side = 3, line = .5)
+     
+   }
+   
+ }
> plot.advanced(x = diamonds$weight,
+               y = diamonds$value,
+               add.regression = TRUE,
+               add.means = TRUE,
+               add.test = TRUE)
> Jacks.Equation(a = 1000, b = 30, c = 7)
standardize.me(c(1, 2, 1, 100))
